{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransactionNew","transaction","min","max","Math","floor","random","reject","id","logSuccess","arr","logError","warn","catch"],"mappings":"2JAGMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAGHI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCVXK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAAAC,GAIjBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM/DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCtBnC,IAIMe,EAAqB,SAAAC,GACzB,IALiCC,EAAKC,EAKhCvB,GAL2BsB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAIpB,SAAQ,SAACC,EAASwB,GAC3BvB,YAAW,WACUoB,KAAKE,SAAW,GAGjCvB,EAAQ,CAACkB,EAAYO,GAAI5B,IAEzB2B,EAAON,EAAYO,MAEpB5B,OAID6B,EAAa,SAAAC,GACjBvB,QAAQC,IAAR,eAA2BsB,EAAI,GAA/B,iBAAkDA,EAAI,GAAtD,QAGIC,EAAW,SAAAH,GACfrB,QAAQyB,KAAR,gCAA6CJ,EAA7C,8BAGFR,EAAmB,CAAEQ,GAAI,KAAMnB,KAAKoB,GAAYI,MAAMF,GACtDX,EAAmB,CAAEQ,GAAI,KAAMnB,KAAKoB,GAAYI,MAAMF,GACtDX,EAAmB,CAAEQ,GAAI,KAAMnB,KAAKoB,GAAYI,MAAMF,GACtDX,EAAmB,CAAEQ,GAAI,KAAMnB,KAAKoB,GAAYI,MAAMF,K","file":"main.f9deb382bc07469a22c1.js","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\n\nconst delay = ms => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(ms);\n      }, ms);\n    });\n};\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger); \ndelay(1000).then(logger); \ndelay(1500).then(logger); ","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\n\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n  \nconst toggleUserState = (allUsers, userName) => {\n    return new Promise(resolve => {\n      const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n      );\n      resolve(updatedUsers);\n    });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransactionNew = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve([transaction.id, delay]);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = arr => {\n  console.log(`Transaction ${arr[0]} processed in ${arr[1]} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransactionNew({ id: 70 }).then(logSuccess).catch(logError);\nmakeTransactionNew({ id: 71 }).then(logSuccess).catch(logError);\nmakeTransactionNew({ id: 72 }).then(logSuccess).catch(logError);\nmakeTransactionNew({ id: 73 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}